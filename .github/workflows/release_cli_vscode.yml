name: Release CLI and VSCode Extension

on:
  push:
    branches:
      - main
    tags:
      - v*
  workflow_dispatch:

permissions:
  contents: read

env:
  TOMBI_VERSION: null
  ASSETS: null
  CC_aarch64-unknown-linux-gnu: aarch64-linux-gnu-gcc
  CC_arm_unknown_linux_gnueabihf: arm-linux-gnueabihf-gcc
  CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: aarch64-linux-gnu-gcc
  CARGO_TARGET_ARM_UNKNOWN_LINUX_GNUEABIHF_LINKER: arm-linux-gnueabihf-gcc

jobs:
  delete-old-dev-artifacts:
    runs-on: ubuntu-latest
    steps:
      - uses: geekyeggo/delete-artifact@v5
        with:
            name: |
              tombi-cli-0.0.0-*
              tombi-vscode-0.0.0-*

  release-cli-and-vscode:
    name: dist (${{ matrix.target }})
    runs-on: ${{ matrix.os }}
    needs: [delete-old-dev-artifacts]
    strategy:
      matrix:
        include:
          - os: ubuntu-24.04
            target: x86_64-unknown-linux-gnu
            vscode_target: linux-x64
          - os: ubuntu-24.04
            target: x86_64-unknown-linux-musl
            vscode_target: linux-x64
          - os: ubuntu-24.04
            target: aarch64-unknown-linux-gnu
            vscode_target: linux-arm64
          - os: ubuntu-24.04
            target: aarch64-unknown-linux-musl
            vscode_target: linux-arm64
          - os: ubuntu-24.04
            target: arm-unknown-linux-gnueabihf
            vscode_target: linux-armhf
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            vscode_target: win32-x64
          - os: windows-latest
            target: aarch64-pc-windows-msvc
            vscode_target: win32-arm64
          - os: macos-13
            target: x86_64-apple-darwin
            vscode_target: darwin-x64
          - os: macos-14
            target: aarch64-apple-darwin
            vscode_target: darwin-arm64
      fail-fast: false
    continue-on-error: true
    env:
      TOMBI_TARGET: ${{ matrix.target }}
      VSCODE_TARGET: ${{ matrix.vscode_target }}
      GITHUB_REF: ${{ (github.ref) }}
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust toolchain
        run: |
          rustup update --no-self-update stable
          rustup target add ${{ matrix.target }}

      - uses: pnpm/action-setup@v4
        with:
          run_install: false

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: '.node-version'
          cache: 'pnpm'

      - name: Update apt repositories
        if: matrix.target == 'aarch64-unknown-linux-gnu' || matrix.target == 'aarch64-unknown-linux-musl' || matrix.target == 'arm-unknown-linux-gnueabihf'
        run: sudo apt-get update

      - name: Install AArch64 target toolchain
        if: matrix.target == 'aarch64-unknown-linux-gnu' || matrix.target == 'aarch64-unknown-linux-musl'
        run: sudo apt-get install gcc-aarch64-linux-gnu

      - name: Install ARM target toolchain
        if: matrix.target == 'arm-unknown-linux-gnueabihf'
        run: sudo apt-get install gcc-arm-linux-gnueabihf

      - run: pnpm install && pnpm run build
        working-directory: ./editors/vscode

      - run: which pnpm

      - name: Run xtask set-version on non-Windows
        if: matrix.os != 'windows-latest'
        run: cargo xtask set-version >> $GITHUB_ENV

      - name: Run xtask set-version on Windows
        if: matrix.os == 'windows-latest'
        run: cargo xtask set-version >> $env:GITHUB_ENV

      - name: Get TOMBI_VERSION
        if: matrix.os != 'windows-latest'
        run: echo "TOMBI_VERSION=${{ env.TOMBI_VERSION }}"

      - name: Rub xtask dist
        run: cargo xtask dist
        env:
          RUST_BACKTRACE: "1"

      # FIXME: pnpm cannot exec `cargo xtask dist` on windows.
      #        See https://github.com/matklad/xshell/issues/82
      - name: Package VSCode Extension for Windows
        if: matrix.os == 'windows-latest'
        run: npx vsce package --no-dependencies -o "../../dist/tombi-vscode-${{ env.TOMBI_VERSION }}-${{ matrix.vscode_target }}.vsix" --target ${{ matrix.vscode_target }}
        working-directory: ./editors/vscode

      - name: Publish VSCode Extension
        run: npx vsce publish --no-dependencies --pat ${{ secrets.VSCODE_MARKETPLACE_TOKEN }} --packagePath "../../dist/tombi-vscode-${{ env.TOMBI_VERSION }}-${{ matrix.vscode_target }}.vsix" --skip-duplicate
        if: startsWith(github.ref, 'refs/tags/')
        working-directory: ./editors/vscode

      - name: Publish OpenVSX Extension
        run: npx ovsx publish --no-dependencies --pat ${{ secrets.OPEN_VSX_ACCESS_TOKEN }} --packagePath "../../dist/tombi-vscode-${{ env.TOMBI_VERSION }}-${{ matrix.vscode_target }}.vsix" --skip-duplicate
        if: startsWith(github.ref, 'refs/tags/')
        working-directory: ./editors/vscode
        timeout-minutes: 2

      - name: Upload tombi-cli artifacts
        uses: actions/upload-artifact@v4
        if: startsWith(github.ref, 'refs/tags/') && matrix.os != 'windows-latest'
        with:
          name: tombi-cli-${{ env.TOMBI_VERSION }}-${{ matrix.target }}.gz
          path: dist/tombi-cli-${{ env.TOMBI_VERSION }}-${{ matrix.target }}.gz

      - name: Upload tombi-cli artifacts (Windows)
        uses: actions/upload-artifact@v4
        if: startsWith(github.ref, 'refs/tags/') && matrix.os == 'windows-latest'
        with:
          name: tombi-cli-${{ env.TOMBI_VERSION }}-${{ matrix.target }}.zip
          path: dist/tombi-cli-${{ env.TOMBI_VERSION }}-${{ matrix.target }}.zip

      - name: Upload tombi-vscode artifacts
        uses: actions/upload-artifact@v4
        if: startsWith(github.ref, 'refs/tags/')
        with:
          name: tombi-vscode-${{ env.TOMBI_VERSION }}-${{ matrix.vscode_target }}.vsix
          path: dist/tombi-vscode-${{ env.TOMBI_VERSION }}-${{ matrix.vscode_target }}.vsix

  release-notes:
    needs: [release-cli-and-vscode]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v4
      - name: Run xtask set-version
        run: cargo xtask set-version >> $GITHUB_ENV
      - name: Download tombi-cli artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: tombi-cli-${{ env.TOMBI_VERSION }}-*

      - name: Find CLI Assets
        id: find_cli_assets
        shell: bash
        run: |
          echo "ASSETS=$(find . -name "tombi-cli-${{ env.TOMBI_VERSION }}-*" -type f | tr '\n' ' ')" >> $GITHUB_ENV

      - name: Create GitHub Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create ${{ github.ref_name }} --generate-notes ${{ env.ASSETS }}
