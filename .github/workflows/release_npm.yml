name: Release NPM Package
on:
  push:
    branches:
      - main
    tags:
      - v*
  workflow_dispatch:

env:
  TOMBI_VERSION: ""
  CC_aarch64-unknown-linux-gnu: aarch64-linux-gnu-gcc
  CC_arm_unknown_linux_gnueabihf: arm-linux-gnueabihf-gcc
  CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: aarch64-linux-gnu-gcc
  CARGO_TARGET_AARCH64_UNKNOWN_LINUX_MUSL_LINKER: aarch64-linux-gnu-gcc
  RUSTFLAGS: "-C strip=symbols"
  GITHUB_REF: ${{ (github.ref) }}

jobs:
  build:
    strategy:
      matrix:
        include:
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            vscode_target: win32-x64
          - os: windows-latest
            target: aarch64-pc-windows-msvc
            vscode_target: win32-arm64
          - os: ubuntu-24.04
            target: x86_64-unknown-linux-gnu
            vscode_target: linux-x64
          - os: ubuntu-24.04
            target: aarch64-unknown-linux-gnu
            vscode_target: linux-arm64
          - os: ubuntu-24.04
            target: x86_64-unknown-linux-musl
            vscode_target: linux-x64-musl
          - os: ubuntu-24.04
            target: aarch64-unknown-linux-musl
            vscode_target: linux-arm64-musl
          - os: macos-14
            target: x86_64-apple-darwin
            vscode_target: darwin-x64
          - os: macos-14
            target: aarch64-apple-darwin
            vscode_target: darwin-arm64
      fail-fast: false
    name: Package ${{ matrix.vscode_target }}
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install Rust toolchain
        run: rustup target add ${{ matrix.target }}

      - name: Install arm64 toolchain
        if: matrix.vscode_target == 'linux-arm64' || matrix.vscode_target == 'linux-arm64-musl'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu

      - name: Install musl toolchain
        if: matrix.vscode_target == 'linux-x64-musl' || matrix.vscode_target == 'linux-arm64-musl'
        run: |
          sudo apt-get update
          sudo apt-get install -y musl-tools

      - name: Set jemalloc page size for linux-arm64
        if: matrix.vscode_target == 'linux-arm64'
        run: |
          echo "JEMALLOC_SYS_WITH_LG_PAGE=16" >> $GITHUB_ENV

      - uses: ./.github/actions/set-version

      # Build the CLI binary
      - name: Build binaries
        run: cargo build -p tombi-cli --release --target ${{ matrix.target }}

      # Copy the CLI binary and rename it to include the name of the target platform
      - run: ls target
      - run: ls target/${{ matrix.target }}
      - run: ls target/${{ matrix.target }}/release
      - name: Copy CLI binary
        if: startsWith(matrix.os, 'windows') == true
        run: |
          mkdir dist
          cp target/${{ matrix.target }}/release/tombi.exe ./dist/tombi-${{ matrix.vscode_target }}.exe
      - name: Copy CLI binary
        if: startsWith(matrix.os, 'windows') == false
        run: |
          mkdir dist
          cp target/${{ matrix.target }}/release/tombi ./dist/tombi-${{ matrix.vscode_target }}

      # Upload the CLI binary as a build artifact
      - name: Upload CLI artifact
        uses: actions/upload-artifact@v4
        with:
          name: cli-${{ matrix.target }}
          path: ./dist/tombi-*
          if-no-files-found: error

  publish:
    name: Publish
    runs-on: ubuntu-latest
    needs:
      - build
    permissions:
      contents: write
      id-token: write
    steps:
      - uses: actions/checkout@v4

      - name: Download CLI artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: cli-*
          merge-multiple: true

      - uses: ./.github/actions/set-version
      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: "https://registry.npmjs.org"

      - name: Generate npm package
        run: node typescript/@tombi-toml/tombi/scripts/generate-packages.mjs

      - name: Publish npm package as latest
        run: |
          set -e
          for package in typescript/@tombi-toml/*; do
            package=${package#typescript/}
            if npm view ${package}@${TOMBI_VERSION} version > /dev/null 2>&1; then
              echo "${package}@${TOMBI_VERSION} is already published. Skipping publish."
              continue
            fi
            npm publish typescript/$package --tag latest --access public --provenance
            echo npm publish typescript/$package --tag latest --access public --provenance
          done
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Publish @tombi-toml/tombi as tombi
        run: |
          set -e
          # Check if tombi@${TOMBI_VERSION} is already published
          if npm view tombi@${TOMBI_VERSION} version > /dev/null 2>&1; then
            echo "tombi@${TOMBI_VERSION} is already published. Skipping publish."
          else
            # Create a temporary directory
            temp_dir=$(mktemp -d)

            # Copy @tombi-toml/tombi package (follow symlinks)
            cp -Lr typescript/@tombi-toml/tombi/* "$temp_dir/"

            # Update package.json to change the name from @tombi-toml/tombi to tombi
            cd "$temp_dir"
            jq '.name = "tombi"' package.json > package.json.tmp && mv package.json.tmp package.json

            # Publish as tombi
            npm publish --tag latest --access public --provenance
            echo "Published tombi@${TOMBI_VERSION}"

            # Clean up
            cd -
            rm -rf "$temp_dir"
          fi
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
