# This file is autogenerated by maturin v1.7.4
# To update, run
#
#    maturin generate-ci github
#
name: Release Python

on:
  push:
    branches:
      - main
    tags:
      - v*
  workflow_dispatch:

permissions:
  contents: read

env:
  TOMBI_VERSION: ""

jobs:
  linux:
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      matrix:
        platform:
          - runner: ubuntu-latest
            target: x86_64
          - runner: ubuntu-latest
            target: x86
          - runner: ubuntu-latest
            target: aarch64
          - runner: ubuntu-latest
            target: armv7
          - runner: ubuntu-latest
            target: s390x
          - runner: ubuntu-latest
            target: ppc64le
      fail-fast: false
    steps:
      - uses: actions/checkout@v4
      - uses: astral-sh/setup-uv@v3
        with:
          enable-cache: true
      - run: uv python install
      - uses: ./.github/actions/set-version
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          args: --release --out dist
          sccache: "true"
          # NOTE: We manually specify a more recent manylinux platform tag for aarch64:
          #         - zenoh-link-quic indirectly depends on ring 0.17 through rustls-webpki.
          #         - ring 0.17 depends on a version of BoringSSL that requires GCC/Clang to provide __ARM_ARCH
          #         - When setting the manylinux tag to 'auto', messense/maturin-action@v1 uses manylinux2014 to compile for for aarch64
          #         - the GCC included in the manylinux2014 docker image doesn't provide __ARM_ARCH
          #       See: https://github.com/briansmith/ring/issues/1728
          manylinux: ${{ matrix.platform.target == 'aarch64' && 'manylinux_2_28' || 'auto' }}
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: tombi-py-wheels-${{ env.TOMBI_VERSION }}-linux-${{ matrix.platform.target }}
          path: dist

  musllinux:
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      matrix:
        platform:
          - runner: ubuntu-latest
            target: x86_64
          - runner: ubuntu-latest
            target: x86
          - runner: ubuntu-latest
            target: aarch64
          - runner: ubuntu-latest
            target: armv7
      fail-fast: false
    steps:
      - uses: actions/checkout@v4
      - uses: astral-sh/setup-uv@v3
        with:
          enable-cache: true
      - run: uv python install
      - uses: ./.github/actions/set-version
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          args: --release --out dist
          sccache: "true"
          manylinux: musllinux_1_2
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: tombi-py-wheels-${{ env.TOMBI_VERSION }}-musllinux-${{ matrix.platform.target }}
          path: dist

  windows:
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      matrix:
        platform:
          - runner: windows-latest
            target: x64
          - runner: windows-latest
            target: x86
      fail-fast: false
    steps:
      - uses: actions/checkout@v4
      - uses: astral-sh/setup-uv@v3
        with:
          enable-cache: true
      - run: uv python install
      - uses: ./.github/actions/set-version
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          args: --release --out dist
          sccache: "true"
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: tombi-py-wheels-${{ env.TOMBI_VERSION }}-windows-${{ matrix.platform.target }}
          path: dist

  macos:
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      matrix:
        platform:
          - runner: macos-13
            target: x86_64
          - runner: macos-14
            target: aarch64
      fail-fast: false
    steps:
      - uses: actions/checkout@v4
      - uses: astral-sh/setup-uv@v3
        with:
          enable-cache: true
      - run: uv python install
      - uses: ./.github/actions/set-version
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          args: --release --out dist
          sccache: "true"
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: tombi-py-wheels-${{ env.TOMBI_VERSION }}-macos-${{ matrix.platform.target }}
          path: dist

  sdist:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: astral-sh/setup-uv@v3
        with:
          enable-cache: true
      - run: uv python install
      - uses: ./.github/actions/set-version
      - name: Build sdist
        uses: PyO3/maturin-action@v1
        with:
          command: sdist
          args: --out dist
      - name: Upload sdist
        uses: actions/upload-artifact@v4
        with:
          name: tombi-py-wheels-${{ env.TOMBI_VERSION }}-sdist
          path: dist

  release-python:
    name: Release
    runs-on: ubuntu-latest
    needs: [linux, musllinux, windows, macos, sdist]
    permissions:
      # Use to sign the release artifacts
      id-token: write
      # Used to upload release artifacts
      contents: write
      # Used to generate artifact attestation
      attestations: write
    steps:
      - uses: actions/download-artifact@v4
      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v1
        with:
          subject-path: "tombi-py-wheels-*/*"
      - name: Publish to PyPI
        if: startsWith(github.ref, 'refs/tags/')
        uses: PyO3/maturin-action@v1
        env:
          MATURIN_PYPI_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
        with:
          command: upload
          args: --non-interactive --skip-existing tombi-py-wheels-*/*

  delete-artifacts:
    runs-on: ubuntu-latest
    needs: [release-python]
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/set-version
      - uses: geekyeggo/delete-artifact@v5
        with:
          name: tombi-py-wheels-${{ env.TOMBI_VERSION }}-*

  update-dependents:
    name: Notify pre-commit mirror
    runs-on: ubuntu-latest
    needs: [release-python]
    steps:
      - name: "Update pre-commit mirror"
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.TOMBI_PRE_COMMIT_PAT }}
          script: |
            github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: 'tombi-pre-commit',
              workflow_id: 'main.yml',
              ref: 'main',
            })
      - name: "Update tombi-setup readme"
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.TOMBI_PRE_COMMIT_PAT }}
          script: |
            github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: 'setup-tombi',
              workflow_id: 'update-readme-version.yml',
              ref: 'main',
            })
